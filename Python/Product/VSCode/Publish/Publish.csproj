<Project>
  <PropertyGroup>
    <TargetFramework>netcoreapp2.0</TargetFramework>
  </PropertyGroup>
  <Import Project="..\..\NetStandard.settings" />
  <PropertyGroup>
    <!-- Override build output during dotnet publish so it goes into a separate folder and does not stomp over signed assemblies -->
    <DotNetPublishPath Condition="'$(DotNetPublishPath)' == ''">$(BuildOutputRoot)publish\</DotNetPublishPath>
    <!-- Nuget packages must be under the $(OutputPath) folder or signing task will fail. -->
    <DotNetPublishNugetPath Condition="'$(DotNetPublishNugetPath)' == ''">$(BuildOutputRoot)\raw\nuget\</DotNetPublishNugetPath>
    <OutputPath Condition="'$(DotNetPublish)' != ''">$(DotNetPublishPath)</OutputPath>
  </PropertyGroup>
  <!-- Nuget packaging -->
  <PropertyGroup>
    <NuGetPackageRoot Condition=" '$(NuGetPackageRoot)' == '' ">$(UserProfile)\.nuget\packages\</NuGetPackageRoot>
    <NugetPackageVersion Condition=" '$(NugetPackageVersion)' == '' ">0.1.0</NugetPackageVersion>
    <NugetExe Condition="$(OS) == 'Windows_NT'">$(NuGetPackageRoot)NuGet.CommandLine\4.5.1\tools\nuget.exe</NugetExe>
    <NugetExe Condition="$(OS) != 'Windows_NT'">nuget</NugetExe>
  </PropertyGroup>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <ItemGroup>
    <ProjectReference Include="..\..\Analysis\AnalysisNetStandard.csproj" />
    <ProjectReference Include="..\AnalysisVsc\AnalysisVsc.csproj" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="MicroBuild.Core" Version="0.2.0" />
    <PackageReference Include="Nuget.CommandLine" Version="4.5.1" />
  </ItemGroup>
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <!-- .NET Core publishing -->
  <PropertyGroup>
    <AnalysisEngineName>python-analysis</AnalysisEngineName>
    <NugetPackageName>$(AnalysisEngineName)-vscode</NugetPackageName>
    <DotNetPublish>true</DotNetPublish>
  </PropertyGroup>
  <ItemGroup>
    <TargetOS Include="win-x86" />
    <TargetOS Include="win-x64" />
    <TargetOS Include="osx-x64" />
    <TargetOS Include="linux-x64" />
  </ItemGroup>
  <ItemGroup>
    <EngineSignedFiles Include="$(OutputPath)Microsoft.Python.Analysis.Engine.dll;$(OutputPath)Microsoft.PythonTools.VsCode.dll" />
    <NuspecSourceFiles Include="$(OutputPath)$(NugetPackageName).nuspec" />
  </ItemGroup>
  <Target Name="AfterBuild">
    <CallTarget Targets="PackPlatformSpecificFolders" />
    <CallTarget Targets="PackNetcoreDependentFolder" />
    <CallTarget Targets="Sha512" />
  </Target>
  <Target Name="PackPlatformSpecificFolders">
    <Exec Command="dotnet publish --no-restore ..\AnalysisVsc\AnalysisVsc.csproj -c $(Configuration) -r %(TargetOS.Identity) /p:OutputPath=$(DotNetPublishPath)%(TargetOS.Identity) /p:DotNetPublish=1" />
    <!-- Copy over signed binaries to the target since .NET MSBuild does not support MS Signing -->
    <Copy SourceFiles="@(EngineSignedFiles)" DestinationFolder="$(DotNetPublishPath)%(TargetOS.Identity)publish" />
    <!-- Copy nuspec to platform folders -->
    <Copy SourceFiles="@(NuspecSourceFiles)" DestinationFolder="$(DotNetPublishPath)%(TargetOS.Identity)publish" />
    <Exec Command="$(NugetExe) pack $(OutputPath)$(NugetPackageName).nuspec -OutputDirectory $(DotNetPublishNugetPath) -Version $(NugetPackageVersion) -NoPackageAnalysis" />
    <Exec Command="$(NugetExe) pack $(DotNetPublishPath)%(TargetOS.Identity)publish\$(NugetPackageName).nuspec -OutputDirectory $(DotNetPublishNugetPath)%(TargetOS.Identity) -Version $(NugetPackageVersion) -NoPackageAnalysis" />
    <Move SourceFiles="$(DotNetPublishNugetPath)%(TargetOS.Identity)\$(NugetPackageName).$(NugetPackageVersion).nupkg" DestinationFiles="$(DotNetPublishNugetPath)\$(NugetPackageName)-%(TargetOS.Identity).$(NugetPackageVersion).nupkg" />
    <Exec Command="rmdir $(DotNetPublishNugetPath)%(TargetOS.Identity)" />
  </Target>
  <Target Name="PackNetcoreDependentFolder">
    <Exec Command="$(NugetExe) pack $(OutputPath)$(NugetPackageName).nuspec -OutputDirectory $(DotNetPublishNugetPath) -Version $(NugetPackageVersion) -NoPackageAnalysis" />
  </Target>
  <ItemGroup>
    <NugetPackages Include="$(DotNetPublishNugetPath)\$(NugetPackageName).$(NugetPackageVersion).nupkg" />
    <NugetPackages Include="$(DotNetPublishNugetPath)\$(NugetPackageName)-win-x86.$(NugetPackageVersion).nupkg" />
    <NugetPackages Include="$(DotNetPublishNugetPath)\$(NugetPackageName)-win-x64.$(NugetPackageVersion).nupkg" />
    <NugetPackages Include="$(DotNetPublishNugetPath)\$(NugetPackageName)-osx-x64.$(NugetPackageVersion).nupkg" />
    <NugetPackages Include="$(DotNetPublishNugetPath)\$(NugetPackageName)-linux-x64.$(NugetPackageVersion).nupkg" />
  </ItemGroup>
  <ItemGroup>
    <FilesToSign Include="@(NugetPackages)">
      <Authenticode>NuGet</Authenticode>
    </FilesToSign>
  </ItemGroup>
  <UsingTask TaskName="GenerateHash" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFile ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Security.Cryptography" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                  var prefix = "python-analysis-vscode";

                  using (var sha = SHA512.Create())              
                  using (var tsFile = new StreamWriter(OutputFile.ItemSpec, false)) {

                    foreach (var item in InputFiles) {
                      var path = item.ItemSpec;

                      var fn = Path.GetFileName(path);
                      var platform = fn.Substring(prefix.Length, fn.IndexOf('.') - prefix.Length);
                      platform = platform.Replace('-', '_');
 
                      using (var stream = new FileStream(path, FileMode.Open)) {
                        var hash = sha.ComputeHash(stream);
                        var sb = new StringBuilder(hash.Length*2);
                        foreach (var b in hash) {
                          sb.Append(b.ToString("x2"));
                        }
 
                        if(platform.Length > 0) {
                          tsFile.WriteLine("export const analysis_engine_" + platform.Substring(1) + "_sha512 = '" + sb.ToString() + "';");
                        }
                      }
                    }
                  }
                ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="Sha512">
    <GenerateHash InputFiles="@(NugetPackages)" OutputFile="$(DotNetPublishNugetPath)\analysisEngineHashes.ts" />
  </Target>
</Project>